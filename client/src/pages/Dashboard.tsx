import { useMemo, useState } from "react";
import { Link } from "wouter";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { RefreshCw, Users, Building2, FileText } from "lucide-react";
import TeamCard from "@/components/TeamCard";
import type { Employee, TeamRecommendation } from "@shared/schema";

type ManualMode = "create" | "edit";

const stats = [
  { titleKey: "dashboard.stats.activeEmployees", value: "24", icon: Users, color: "text-blue-600", href: "/funcionarias" },
  { titleKey: "dashboard.stats.registeredHouses", value: "18", icon: Building2, color: "text-green-600", href: "/casas" },
  { titleKey: "dashboard.stats.availableTests", value: "5", icon: FileText, color: "text-purple-600", href: "/testes" },
] as const;

const employeePool: Employee[] = [
  { id: "1", name: "Ana Silva", role: "drive", status: "active", traits: ["organized", "leadership", "communicative"] },
  { id: "2", name: "Maria Santos", role: "help", status: "active", traits: ["detailOriented", "collaborative", "patient"] },
  { id: "3", name: "Carla Oliveira", role: "drive", status: "active", traits: ["proactive", "communicative", "responsible"] },
  { id: "4", name: "Julia Costa", role: "help", status: "active", traits: ["patient", "meticulous", "systematic"] },
  { id: "5", name: "Patricia Lima", role: "support", status: "active", traits: ["systematic", "punctual", "trustworthy"] },
  { id: "6", name: "Livia Rocha", role: "support", status: "active", traits: ["trustworthy", "patient", "collaborative"] },
];

const initialTeams: TeamRecommendation[] = [
  {
    id: "team-1",
    members: ["1", "2", "6"].map((id) => ({ ...employeePool.find((emp) => emp.id === id)! })),
    compatibility: 89,
    justification: "dashboard.recommendations.justification1",
  },
  {
    id: "team-2",
    members: ["3", "4", "5"].map((id) => ({ ...employeePool.find((emp) => emp.id === id)! })),
    compatibility: 93,
    justification: "dashboard.recommendations.justification2",
    house: {
      id: "house-1",
      name: "Residencia Executiva",
      type: "detailed",
      difficulty: 5,
      rating: 4.9,
    },
  },
];

function createAutoTeam(size: number, map: Map<string, Employee>): TeamRecommendation {
  const pool = Array.from(map.values());
  const shuffled = [...pool].sort(() => Math.random() - 0.5);
  const selected = shuffled.slice(0, size).map((emp) => ({ ...emp }));
  const compatibility = Math.floor(Math.random() * 16) + 80;
  return {
    id: `auto-${Date.now()}`,
    members: selected,
    compatibility,
    justification: "dashboard.recommendations.autoGenerated",
  };
}

export default function Dashboard() {
  const { t } = useTranslation();
  const [isGenerating, setIsGenerating] = useState(false);
  const [teams, setTeams] = useState<TeamRecommendation[]>(initialTeams);
  const [manualOpen, setManualOpen] = useState(false);
  const [selectedMembers, setSelectedMembers] = useState<string[]>([]);
  const [manualError, setManualError] = useState<string | null>(null);
  const [manualMode, setManualMode] = useState<ManualMode>("create");
  const [editingTeamId, setEditingTeamId] = useState<string | null>(null);

  const employeeMap = useMemo(() => new Map(employeePool.map((emp) => [emp.id, emp])), []);

  const openCreateDialog = () => {
    setManualMode("create");
    setEditingTeamId(null);
    setSelectedMembers([]);
    setManualError(null);
    setManualOpen(true);
  };

  const openEditDialog = (team: TeamRecommendation) => {
    setManualMode("edit");
    setEditingTeamId(team.id);
    setSelectedMembers(team.members.map((member) => member.id));
    setManualError(null);
    setManualOpen(true);
  };

  const closeManualDialog = (open: boolean) => {
    setManualOpen(open);
    if (!open) {
      setSelectedMembers([]);
      setManualError(null);
      setManualMode("create");
      setEditingTeamId(null);
    }
  };

  const handleAutoGenerate = (size: number) => {
    if (isGenerating) return;
    setIsGenerating(true);
    setTimeout(() => {
      const team = createAutoTeam(size, employeeMap);
      setTeams((prev) => [team, ...prev]);
      setIsGenerating(false);
    }, 800);
  };

  const toggleManualMember = (id: string) => {
    setManualError(null);
    setSelectedMembers((prev) => {
      if (prev.includes(id)) {
        return prev.filter((item) => item !== id);
      }
      if (prev.length >= 3) {
        setManualError(t("dashboard.manualDialog.errorMax"));
        return prev;
      }
      return [...prev, id];
    });
  };

  const handleManualSubmit = () => {
    if (selectedMembers.length < 2) {
      setManualError(t("dashboard.manualDialog.errorMin"));
      return;
    }

    const members = selectedMembers
      .map((id) => employeeMap.get(id))
      .filter((emp): emp is Employee => Boolean(emp))
      .map((emp) => ({ ...emp }));

    if (manualMode === "edit" && editingTeamId) {
      setTeams((prev) =>
        prev.map((team) =>
          team.id === editingTeamId
            ? {
                ...team,
                members,
                justification: "dashboard.recommendations.manualEdited",
              }
            : team,
        ),
      );
    } else {
      const compatibility = Math.floor(Math.random() * 11) + 80;
      const manualTeam: TeamRecommendation = {
        id: `manual-${Date.now()}`,
        members,
        compatibility,
        justification: "dashboard.recommendations.manualCreated",
      };
      setTeams((prev) => [manualTeam, ...prev]);
    }

    setManualOpen(false);
    setSelectedMembers([]);
    setManualMode("create");
    setEditingTeamId(null);
    setManualError(null);
  };

  const handleDeleteTeam = (teamId: string) => {
    if (!teams.some((team) => team.id === teamId)) {
      return;
    }
    if (!window.confirm(t("teamCard.deleteConfirm"))) {
      return;
    }
    setTeams((prev) => prev.filter((team) => team.id !== teamId));
    if (editingTeamId === teamId) {
      setManualMode("create");
      setEditingTeamId(null);
      setSelectedMembers([]);
      setManualError(null);
      setManualOpen(false);
    }
  };

  const manualDialogTitle = manualMode === "edit" ? t("dashboard.manualDialog.editTitle") : t("dashboard.manualDialog.title");
  const manualSubmitLabel = manualMode === "edit" ? t("dashboard.manualDialog.update") : t("dashboard.manualDialog.submit");

  return (
    <div className="p-6 space-y-6" data-testid="page-dashboard">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">{t("navigation.dashboard")}</h1>
          <p className="text-muted-foreground">{t("dashboard.subtitle")}</p>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button data-testid="button-generate-teams" className="gap-2" disabled={isGenerating}>
              <RefreshCw className={`w-4 h-4 ${isGenerating ? "animate-spin" : ""}`} />
              {isGenerating ? t("actions.generatingTeams") : t("actions.generateTeams")}
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>{t("dashboard.generateMenu.title")}</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={() => handleAutoGenerate(2)} disabled={isGenerating}>
              {t("dashboard.generateMenu.autoTwo")}
            </DropdownMenuItem>
            <DropdownMenuItem onClick={() => handleAutoGenerate(3)} disabled={isGenerating}>
              {t("dashboard.generateMenu.autoThree")}
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={openCreateDialog}>{t("dashboard.generateMenu.manual")}</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {stats.map((stat) => (
          <Link
            key={stat.titleKey}
            href={stat.href}
            className="block focus:outline-none focus-visible:ring-2 focus-visible:ring-primary rounded-lg"
          >
            <Card className="hover-elevate h-full">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">{t(stat.titleKey)}</CardTitle>
                <stat.icon className={`h-4 w-4 ${stat.color}`} />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold" data-testid={`stat-${stat.titleKey.split(".").pop()}`}>
                  {stat.value}
                </div>
              </CardContent>
            </Card>
          </Link>
        ))}
      </div>

      <div>
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-semibold">{t("dashboard.recommendedTeams")}</h2>
          <Badge variant="secondary">{t("dashboard.suggestions", { count: teams.length })}</Badge>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {teams.map((team) => (
            <TeamCard
              key={team.id}
              team={team}
              onEdit={openEditDialog}
              onDelete={(value) => handleDeleteTeam(value.id)}
            />
          ))}
        </div>
      </div>

      <Dialog open={manualOpen} onOpenChange={closeManualDialog}>
        <DialogContent data-testid="dialog-manual-team">
          <DialogHeader>
            <DialogTitle>{manualDialogTitle}</DialogTitle>
          </DialogHeader>
          <p className="text-sm text-muted-foreground">{t("dashboard.manualDialog.helper")}</p>
          {manualError && <p className="text-sm text-destructive">{manualError}</p>}
          <div className="space-y-2 max-h-64 overflow-auto">
            {employeePool.map((employee) => {
              const checked = selectedMembers.includes(employee.id);
              return (
                <div key={employee.id} className="flex items-center justify-between rounded-md border p-3">
                  <div className="flex items-center gap-3">
                    <Checkbox
                      id={`manual-${employee.id}`}
                      checked={checked}
                      onCheckedChange={() => toggleManualMember(employee.id)}
                    />
                    <Label htmlFor={`manual-${employee.id}`} className="text-sm">
                      <span className="font-medium">{employee.name}</span>
                      <span className="ml-2 inline-flex">
                        <Badge variant="outline">{t(`roles.${employee.role}`)}</Badge>
                      </span>
                    </Label>
                  </div>
                  <div className="hidden text-xs text-muted-foreground sm:block">
                    {employee.traits.slice(0, 3).map((trait) => t(`traits.${trait}`)).join(", ")}
                  </div>
                </div>
              );
            })}
          </div>
          <div className="flex justify-end gap-2">
            <Button variant="outline" onClick={() => closeManualDialog(false)}>
              {t("actions.cancel")}
            </Button>
            <Button onClick={handleManualSubmit} data-testid="button-manual-team-submit">
              {manualSubmitLabel}
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
