import { useEffect, useMemo, useState } from "react";
import { Link } from "wouter";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { RefreshCw, Users, Building2, FileText } from "lucide-react";
import TeamCard from "@/components/TeamCard";
import type { Employee, TeamRecommendation, House } from "@shared/schema";
import { useEmployees } from "@/hooks/useEmployees";
import { useHouses } from "@/hooks/useHouses";
import { useTests } from "@/hooks/useTests";

type ManualMode = "create" | "edit";

function calculateCompatibility(members: Employee[]): number {
  const uniqueRoles = new Set(members.map((member) => member.role)).size;
  const traitScore = members.reduce((acc, member) => acc + (member.traits?.length ?? 0), 0);
  const preferenceScore = members.reduce(
    (acc, member) => acc + ((member.preferences?.length ?? 0)),
    0,
  );

  const base = 70 + uniqueRoles * 6;
  const total = base + Math.min(20, traitScore * 2) + Math.min(10, preferenceScore);
  return Math.min(99, Math.max(60, Math.round(total)));
}

function cloneMembers(members: Employee[]): Employee[] {
  return members.map((member) => ({ ...member }));
}

function generateInitialTeams(employees: Employee[], houses: House[]): TeamRecommendation[] {
  const sorted = [...employees].sort((a, b) => a.name.localeCompare(b.name));
  const teams: TeamRecommendation[] = [];

  if (sorted.length >= 3) {
    const members = cloneMembers(sorted.slice(0, 3));
    teams.push({
      id: "suggestion-1",
      members,
      compatibility: calculateCompatibility(members),
      justification: "dashboard.recommendations.autoGenerated",
      house: houses[0] ? { ...houses[0] } : undefined,
    });
  }

  if (sorted.length >= 6) {
    const members = cloneMembers(sorted.slice(3, 6));
    teams.push({
      id: "suggestion-2",
      members,
      compatibility: calculateCompatibility(members),
      justification: "dashboard.recommendations.autoGenerated",
      house: houses[1] ? { ...houses[1] } : undefined,
    });
  } else if (sorted.length >= 4) {
    const members = cloneMembers(sorted.slice(1, 4));
    teams.push({
      id: "suggestion-2",
      members,
      compatibility: calculateCompatibility(members),
      justification: "dashboard.recommendations.autoGenerated",
      house: houses[1] ? { ...houses[1] } : undefined,
    });
  }

  return teams;
}

function createAutoTeam(size: number, available: Map<string, Employee>): TeamRecommendation | null {
  if (available.size < size) {
    return null;
  }
  const pool = Array.from(available.values());
  const shuffled = [...pool].sort(() => Math.random() - 0.5);
  const members = cloneMembers(shuffled.slice(0, size));

  return {
    id: `auto-${Date.now()}`,
    members,
    compatibility: calculateCompatibility(members),
    justification: "dashboard.recommendations.autoGenerated",
  };
}

export default function Dashboard() {
  const { t } = useTranslation();
  const {
    employees,
    isLoading: employeesLoading,
    isError: employeesError,
  } = useEmployees();
  const {
    houses,
    isLoading: housesLoading,
    isError: housesError,
  } = useHouses();
  const { tests, isLoading: testsLoading, isError: testsError } = useTests();

  const isLoadingData = employeesLoading || housesLoading || testsLoading;
  const hasError = employeesError || housesError || testsError;

  const availableEmployees = useMemo(
    () => employees.filter((employee) => employee.status === "active"),
    [employees],
  );

  const employeeMap = useMemo(
    () => new Map(availableEmployees.map((employee) => [employee.id, employee])),
    [availableEmployees],
  );

  const [isGenerating, setIsGenerating] = useState(false);
  const [teams, setTeams] = useState<TeamRecommendation[]>([]);
  const [manualOpen, setManualOpen] = useState(false);
  const [selectedMembers, setSelectedMembers] = useState<string[]>([]);
  const [manualError, setManualError] = useState<string | null>(null);
  const [manualMode, setManualMode] = useState<ManualMode>("create");
  const [editingTeamId, setEditingTeamId] = useState<string | null>(null);

  const teamsLength = teams.length;

  useEffect(() => {
    if (isLoadingData) {
      return;
    }

    if (!availableEmployees.length) {
      if (teamsLength > 0) {
        setTeams([]);
      }
      return;
    }

    if (teamsLength === 0) {
      setTeams(generateInitialTeams(availableEmployees, houses));
    }
  }, [availableEmployees, houses, isLoadingData, teamsLength]);

  const openCreateDialog = () => {
    setManualMode("create");
    setEditingTeamId(null);
    setSelectedMembers([]);
    setManualError(null);
    setManualOpen(true);
  };

  const openEditDialog = (team: TeamRecommendation) => {
    setManualMode("edit");
    setEditingTeamId(team.id);
    setSelectedMembers(team.members.map((member) => member.id));
    setManualError(null);
    setManualOpen(true);
  };

  const closeManualDialog = (open: boolean) => {
    setManualOpen(open);
    if (!open) {
      setSelectedMembers([]);
      setManualError(null);
      setManualMode("create");
      setEditingTeamId(null);
    }
  };

  const handleAutoGenerate = (size: number) => {
    if (isGenerating || employeeMap.size < size) {
      return;
    }
    setIsGenerating(true);
    setTimeout(() => {
      const team = createAutoTeam(size, employeeMap);
      if (team) {
        setTeams((prev) => [team, ...prev]);
      }
      setIsGenerating(false);
    }, 600);
  };

  const toggleManualMember = (id: string) => {
    setManualError(null);
    setSelectedMembers((prev) => {
      if (prev.includes(id)) {
        return prev.filter((item) => item !== id);
      }
      if (prev.length >= 3) {
        setManualError(t("dashboard.manualDialog.errorMax"));
        return prev;
      }
      return [...prev, id];
    });
  };

  const handleManualSubmit = () => {
    if (selectedMembers.length < 2) {
      setManualError(t("dashboard.manualDialog.errorMin"));
      return;
    }

    const members = selectedMembers
      .map((id) => employeeMap.get(id))
      .filter((employee): employee is Employee => Boolean(employee))
      .map((employee) => ({ ...employee }));

    const compatibility = calculateCompatibility(members);

    if (manualMode === "edit" && editingTeamId) {
      setTeams((prev) =>
        prev.map((team) =>
          team.id === editingTeamId
            ? {
                ...team,
                members,
                compatibility,
                justification: "dashboard.recommendations.manualEdited",
              }
            : team,
        ),
      );
    } else {
      const manualTeam: TeamRecommendation = {
        id: `manual-${Date.now()}`,
        members,
        compatibility,
        justification: "dashboard.recommendations.manualCreated",
      };
      setTeams((prev) => [manualTeam, ...prev]);
    }

    setManualOpen(false);
    setSelectedMembers([]);
    setManualMode("create");
    setEditingTeamId(null);
    setManualError(null);
  };

  const handleDeleteTeam = (teamId: string) => {
    setTeams((prev) => prev.filter((team) => team.id !== teamId));
    if (editingTeamId === teamId) {
      setManualMode("create");
      setEditingTeamId(null);
      setSelectedMembers([]);
      setManualError(null);
      setManualOpen(false);
    }
  };

  const manualDialogTitle =
    manualMode === "edit"
      ? t("dashboard.manualDialog.editTitle")
      : t("dashboard.manualDialog.title");
  const manualSubmitLabel =
    manualMode === "edit"
      ? t("dashboard.manualDialog.update")
      : t("dashboard.manualDialog.submit");

  const stats = useMemo(
    () => [
      {
        titleKey: "dashboard.stats.activeEmployees",
        value: availableEmployees.length.toString(),
        icon: Users,
        color: "text-blue-600",
        href: "/funcionarias",
      },
      {
        titleKey: "dashboard.stats.registeredHouses",
        value: houses.length.toString(),
        icon: Building2,
        color: "text-green-600",
        href: "/casas",
      },
      {
        titleKey: "dashboard.stats.availableTests",
        value: tests.length.toString(),
        icon: FileText,
        color: "text-purple-600",
        href: "/testes",
      },
    ],
    [availableEmployees.length, houses.length, tests.length],
  );

  if (hasError) {
    return (
      <div className="p-6 space-y-4" data-testid="page-dashboard-error">
        <h1 className="text-3xl font-bold">{t("navigation.dashboard")}</h1>
        <p className="text-destructive">
          {t("dashboard.errors.loadFailed", {
            defaultValue: "Nao foi possivel carregar os dados do painel.",
          })}
        </p>
      </div>
    );
  }

  if (isLoadingData) {
    return (
      <div className="p-6 space-y-4" data-testid="page-dashboard-loading">
        <h1 className="text-3xl font-bold">{t("navigation.dashboard")}</h1>
        <p className="text-muted-foreground">
          {t("dashboard.loading", { defaultValue: "Carregando dados do painel..." })}
        </p>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6" data-testid="page-dashboard">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">{t("navigation.dashboard")}</h1>
          <p className="text-muted-foreground">{t("dashboard.subtitle")}</p>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              data-testid="button-generate-teams"
              className="gap-2"
              disabled={isGenerating || employeeMap.size < 2}
            >
              <RefreshCw className={`w-4 h-4 ${isGenerating ? "animate-spin" : ""}`} />
              {isGenerating ? t("actions.generatingTeams") : t("actions.generateTeams")}
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>{t("dashboard.generateMenu.title")}</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem
              onClick={() => handleAutoGenerate(2)}
              disabled={isGenerating || employeeMap.size < 2}
            >
              {t("dashboard.generateMenu.autoTwo")}
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() => handleAutoGenerate(3)}
              disabled={isGenerating || employeeMap.size < 3}
            >
              {t("dashboard.generateMenu.autoThree")}
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem
              onClick={openCreateDialog}
              disabled={employeeMap.size < 2}
            >
              {t("dashboard.generateMenu.manual")}
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {stats.map((stat) => (
          <Link
            key={stat.titleKey}
            href={stat.href}
            className="block focus:outline-none focus-visible:ring-2 focus-visible:ring-primary rounded-lg"
          >
            <Card className="hover-elevate h-full">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">{t(stat.titleKey)}</CardTitle>
                <stat.icon className={`h-4 w-4 ${stat.color}`} />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold" data-testid={`stat-${stat.titleKey.split(".").pop()}`}>
                  {stat.value}
                </div>
              </CardContent>
            </Card>
          </Link>
        ))}
      </div>

      <div>
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-semibold">{t("dashboard.recommendedTeams")}</h2>
          <Badge variant="secondary">{t("dashboard.suggestions", { count: teams.length })}</Badge>
        </div>

        {teams.length === 0 ? (
          <Card>
            <CardContent className="py-6">
              <p className="text-muted-foreground">
                {t("dashboard.noTeams", {
                  defaultValue: "Cadastre colaboradoras ativas para gerar sugestoes automaticamente.",
                })}
              </p>
            </CardContent>
          </Card>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {teams.map((team) => (
              <TeamCard
                key={team.id}
                team={team}
                onEdit={availableEmployees.length >= 2 ? openEditDialog : undefined}
                onDelete={(value) => handleDeleteTeam(value.id)}
              />
            ))}
          </div>
        )}
      </div>

      <Dialog open={manualOpen} onOpenChange={closeManualDialog}>
        <DialogContent data-testid="dialog-manual-team">
          <DialogHeader>
            <DialogTitle>{manualDialogTitle}</DialogTitle>
          </DialogHeader>
          <p className="text-sm text-muted-foreground">{t("dashboard.manualDialog.helper")}</p>
          {manualError && <p className="text-sm text-destructive">{manualError}</p>}

          {availableEmployees.length === 0 ? (
            <div className="py-4">
              <p className="text-sm text-muted-foreground">
                {t("dashboard.noEmployeesForManual", {
                  defaultValue: "Nao ha colaboradoras ativas disponiveis para montar equipes.",
                })}
              </p>
            </div>
          ) : (
            <div className="space-y-2 max-h-64 overflow-auto">
              {availableEmployees.map((employee) => {
                const checked = selectedMembers.includes(employee.id);
                return (
                  <div key={employee.id} className="flex items-center justify-between rounded-md border p-3">
                    <div className="flex items-center gap-3">
                      <Checkbox
                        id={`manual-${employee.id}`}
                        checked={checked}
                        onCheckedChange={() => toggleManualMember(employee.id)}
                      />
                      <Label htmlFor={`manual-${employee.id}`} className="text-sm">
                        <span className="font-medium">{employee.name}</span>
                        <span className="ml-2 inline-flex">
                          <Badge variant="outline">{t(`roles.${employee.role}`)}</Badge>
                        </span>
                      </Label>
                    </div>
                    <div className="hidden text-xs text-muted-foreground sm:block">
                      {employee.traits.slice(0, 3).map((trait) => t(`traits.${trait}`, { defaultValue: trait })).join(", ")}
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          <div className="flex justify-end gap-2">
            <Button variant="outline" onClick={() => closeManualDialog(false)}>
              {t("actions.cancel")}
            </Button>
            <Button onClick={handleManualSubmit} data-testid="button-manual-team-submit" disabled={availableEmployees.length < 2}>
              {manualSubmitLabel}
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
